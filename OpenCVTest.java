/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Test;

import java.util.ArrayList;
import java.util.List;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.core.Core;
import static org.opencv.core.Core.inRange;
import org.opencv.core.CvType;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import java.awt.Point;
import org.opencv.core.Size;

/**
 *
 * @author YahMa
 */
public class OpenCVTest extends javax.swing.JFrame {

    private final JFileChooser ofd;
    private BufferedImage img;
    Imgcodecs imgcdx = new Imgcodecs();
    Mat imgCardMTX = new Mat();
    Mat roi = new Mat();
    Rect rect = new Rect(35, 110, 250, 350);
    static int[][] testmtx;

    /**
     * Creates new form OpenCVTest
     */
    public OpenCVTest() {
        initComponents();

        ofd = new JFileChooser();
        ofd.setFileFilter(new FileNameExtensionFilter("PNG images", "png"));
        ofd.setCurrentDirectory(new File("C:\\Users\\YahMa\\OneDrive\\Documents\\TrentU\\Year four\\Fall 2023\\Software Engineering Project\\Automated IFAT Grading System\\IFATGradingAlgoTest"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_Open = new javax.swing.JButton();
        lbl_Image = new javax.swing.JLabel();
        lbl_msg = new javax.swing.JLabel();
        btn_Exit = new javax.swing.JButton();
        btn_GetROI = new javax.swing.JButton();
        btn_ClearROI = new javax.swing.JButton();
        btn_Select = new javax.swing.JButton();
        btn_Detect = new javax.swing.JButton();
        btn_Colour = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_Open.setText("Open");
        btn_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_OpenActionPerformed(evt);
            }
        });

        lbl_Image.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbl_msg.setText("output");

        btn_Exit.setText("Exit");
        btn_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExitActionPerformed(evt);
            }
        });

        btn_GetROI.setText("Get ROI");
        btn_GetROI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_GetROIActionPerformed(evt);
            }
        });

        btn_ClearROI.setText("Clear ROI");

        btn_Select.setText("Select ROI");
        btn_Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SelectActionPerformed(evt);
            }
        });

        btn_Detect.setText("Detect");
        btn_Detect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DetectActionPerformed(evt);
            }
        });

        btn_Colour.setText("Colour");
        btn_Colour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ColourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(lbl_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lbl_Image, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btn_Open, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btn_Exit, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(btn_GetROI)
                    .addComponent(btn_ClearROI)
                    .addComponent(btn_Select)
                    .addComponent(btn_Detect)
                    .addComponent(btn_Colour))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Open)
                    .addComponent(lbl_msg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btn_Select)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_GetROI)
                        .addGap(18, 18, 18)
                        .addComponent(btn_ClearROI)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Detect)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Colour)
                        .addGap(68, 68, 68)
                        .addComponent(btn_Exit))
                    .addComponent(lbl_Image, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_OpenActionPerformed
        int returnVal = ofd.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                img = ImageIO.read(ofd.getSelectedFile());
                String filepath = ofd.getSelectedFile().getPath();
                System.out.println(filepath);
                imgCardMTX = imgcdx.imread(filepath);
                ImageIcon card = new ImageIcon(img);
                lbl_Image.setIcon(card);
                lbl_msg.setText("loaded image");
            } catch (Exception e) {
                lbl_msg.setText("failed to load image file");
            }
        } else {
            lbl_msg.setText("no file chosen");
        }
    }//GEN-LAST:event_btn_OpenActionPerformed

    private void btn_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btn_ExitActionPerformed

    private void btn_SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SelectActionPerformed
        try {
            System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

            Imgproc.rectangle(imgCardMTX, rect, new Scalar(0, 0, 255), 1);
            MatOfByte matByte = new MatOfByte();
            Imgcodecs.imencode(".png", imgCardMTX, matByte);
            byte[] byteArray = matByte.toArray();
            InputStream in = new ByteArrayInputStream(byteArray);
            img = ImageIO.read(in);

            ImageIcon card = new ImageIcon(img);
            lbl_Image.setIcon(card);
            lbl_msg.setText("rectangle drawn");
        } catch (Exception e) {
            lbl_msg.setText(e.getMessage());
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btn_SelectActionPerformed

    private void btn_GetROIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_GetROIActionPerformed
        try {
            roi = new Mat(imgCardMTX, rect);
            BufferedImage cardROI = convertToBuff(roi);
            ImageIcon card = new ImageIcon(cardROI);
            lbl_Image.setIcon(card);
            lbl_msg.setText("image roi");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_btn_GetROIActionPerformed

    private void btn_ColourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ColourActionPerformed
        try {
            //Rect pixelArea = new Rect(4,40,40,30);
            Mat gray = new Mat();
            //gray.convertTo(gray,CvType.CV_16UC1);
            Imgproc.cvtColor(roi, gray, Imgproc.COLOR_RGB2GRAY);
            //Imgproc.cvtColor(imgCardMTX, gray, Imgproc.COLOR_RGB2GRAY);
            //Imgproc.rectangle(gray, pixelArea, new Scalar(210), 1);
            Scalar low = new Scalar(115);
            Scalar high = new Scalar(180);
            Mat mask = new Mat();
            inRange(gray, low, high, mask);
            gray.setTo(new Scalar(0), mask);
            BufferedImage grayROI = convertToBuff(gray);
            ImageIcon card = new ImageIcon(grayROI);
            lbl_Image.setIcon(card);
            lbl_msg.setText("gray roi");

            int channels = gray.channels();
            int numRows = gray.rows();
            int numCols = gray.cols();
            //int numCols = (numRows * channels);

            boolean continuous = gray.isContinuous();
            /*
            if(continuous){
                numCols *= numRows;
                numRows = 1;
            }*/
            System.out.println("channels " + channels + " rows " + numRows + " cols " + numCols + " continuous " + continuous);
            //System.out.println(gray.type());

            //System.out.print(gray.dump());
            testmtx = matToArray2D(gray);
            //printArray(testmtx);
            int[][] cardArray = mapToCard(testmtx, 5, 10);
            //System.out.println(gray.dump());
            printArray(testmtx);
            printArray(cardArray);

        } catch (Exception e) {
            System.out.println(e.getMessage() + " " + e.getClass());
        }


    }//GEN-LAST:event_btn_ColourActionPerformed

    private void btn_DetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DetectActionPerformed
        Mat gray = new Mat();
        Imgproc.cvtColor(roi, gray, Imgproc.COLOR_BGR2GRAY);
        Imgproc.blur(gray, gray, new Size(3, 3));

        Mat cannyOut = new Mat();
        Imgproc.Canny(gray, cannyOut, 160, 320);
        //System.out.println(printMat(cannyOut));

        List<MatOfPoint> contours = new ArrayList<>();
        Mat hier = new Mat();
        Imgproc.findContours(cannyOut, contours, hier, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);

        MatOfPoint2f[] contoursPoly = new MatOfPoint2f[contours.size()];
        Rect[] boundRect = new Rect[contours.size()];

        for (int i = 0; i < contours.size(); i++) {
            contoursPoly[i] = new MatOfPoint2f();
            Imgproc.approxPolyDP(new MatOfPoint2f(contours.get(i).toArray()), contoursPoly[i], 3, true);
            boundRect[i] = Imgproc.boundingRect(new MatOfPoint(contoursPoly[i].toArray()));
        }

        System.out.println(boundRect.length);

        Mat drawing = Mat.zeros(cannyOut.size(), CvType.CV_8UC3);
        List<MatOfPoint> contoursPolyList = new ArrayList<>(contoursPoly.length);

        for (MatOfPoint2f poly : contoursPoly) {
            contoursPolyList.add(new MatOfPoint(poly.toArray()));
        }

        for (int i = 0; i < contours.size(); i++) {
            //Imgproc.drawContours(drawing, contoursPolyList,i, new Scalar(0,0,255), 1);
            if (boundRect[i].height > 20) {
                Imgproc.rectangle(drawing, boundRect[i].tl(), boundRect[i].br(), new Scalar(255, 0, 0), 1);
            }

        }
        try {
            BufferedImage roiContours = convertToBuff(drawing);
            ImageIcon card = new ImageIcon(roiContours);
            lbl_Image.setIcon(card);
            lbl_msg.setText("roi contours");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }


    }//GEN-LAST:event_btn_DetectActionPerformed

    private static BufferedImage convertToBuff(Mat mtx) throws IOException {
        //Encoding the image
        MatOfByte matOfByte = new MatOfByte();
        Imgcodecs.imencode(".png", mtx, matOfByte);

        //Storing the encoded Mat in a byte array
        byte[] byteArray = matOfByte.toArray();

        //Preparing the Buffered Image
        InputStream in = new ByteArrayInputStream(byteArray);
        BufferedImage bufImage = ImageIO.read(in);
        return bufImage;
    }

    private static void printArray(int[][] mtx) {
        for (int i = 0; i < mtx.length; i++) {
            for (int j = 0; j < mtx[j].length; j++) {
                System.out.print(mtx[i][j] + "\t");
            }
            System.out.print("\n");
        }
    }

    private static int[][] mapToCard(int[][] mtx, int boxes, int questions) {

        int[][] cardArray = new int[questions][boxes];
        int numRows = mtx.length;
        int numCols = mtx[boxes].length;
        System.out.println("rows " + numRows + " cols " + numCols);
        int xPtr = 0;
        int yPtr = 0;
        // set the threshold values
        int horThresh = 35;
        int verThresh = 22;

        // row/col index for tl corner
        int rIndx;
        int cIndx;
        // pixel value
        int pix;
        Point[] boxPnts = new Point[boxes * questions];
        int k = 0;
        // traverse 2d array
        for (int i = 0; i < mtx.length; i++) {
            for (int j = 0; j < mtx[j].length; j++) {
                pix = mtx[i][j];
                if (pix == 0) {
                    rIndx = i;
                    cIndx = j;

                    // look ahead
                    int csum = 0;
                    int rsum = 0;
                    int area = 0;

                    if ((rIndx + verThresh) < mtx.length) {
                        for (int cx = rIndx; cx < (rIndx + verThresh); cx++) {
                            csum += mtx[cx][cIndx];
                        }
                    }
                    if ((cIndx + horThresh) < (mtx[j].length)) {
                        for (int cy = cIndx; cy < (cIndx + horThresh); cy++) {
                            rsum += mtx[rIndx][cy];
                        }
                    }
                    if ((csum == 0) && (rsum == 0)) {
                        if ((rIndx + verThresh) < mtx.length) {
                            for (int cx = rIndx; cx < (rIndx + verThresh); cx++) {
                                //mtx[cx][cIndx] = 1;
                                if ((cIndx + horThresh) < mtx[j].length) {
                                    for (int cy = cIndx; cy < (cIndx + horThresh); cy++) {
                                        mtx[cx][cy] = 1;
                                        area += mtx[cx][cy];
                                    }
                                    if (area == 770) {
                                        boxPnts[k] = new Point(rIndx, cIndx);
                                        k++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        for (int i = 0; i < cardArray.length; i++) {
            for (int j = 0; j < cardArray[j].length; j++) {
                cardArray[i][j] = 1;
            }
        }
        // number of scratched boxes
        int numScratched = 0;

        // mapping algorithm
        for (int i = 0; i < boxPnts.length; i++) {
            // set lower x/y bounds
            int lowerX = 0;
            int lowerY = 0;
            // set upper x/y bounds
            int upperX = (numRows / questions) * 1;
            int upperY = (numCols / boxes) * 1;
            
            if (!(boxPnts[i] == null)) {
                numScratched++;
                //System.out.println("(" + boxPnts[i].x + " ," + boxPnts[i].y + ")");
                boolean xfound = false;
                boolean yfound = false;
                int j = 1;
                while ((!(xfound)) && (j < (cardArray.length) + 1)) {
                    if ((boxPnts[i].x > lowerX) && boxPnts[i].x < upperX) {
                        xPtr = j - 1;
                        xfound = true;
                    } else {
                        lowerX = upperX;
                        upperX = (numRows / questions) * (j + 1);
                    }
                    j++;
                }
                j = 1;
                while ((!yfound) && (j < (cardArray[j].length) + 1)) {
                    if ((boxPnts[i].y > lowerY) && boxPnts[i].y < upperY) {
                        yPtr = j - 1;
                        yfound = true;
                    } else {
                        lowerY = upperY;
                        upperY = (numCols / boxes) * (j + 1);
                    }
                    j++;
                }
                //System.out.println("xptr " + xPtr + " yptr " + yPtr);
                cardArray[xPtr][yPtr] = 0;
            }
        }
        System.out.println("num unscratched " + numScratched);
        // System.out.println("upper x " + upperX);
        // System.out.println("upper y " + upperY);
        //printArray(mtx);
        return cardArray;
    }

    private static int[][] matToArray2D(Mat mtx) {
        // get rows/cols from mat obj
        int numRows = mtx.rows();
        int numCols = mtx.cols();
        int channels = mtx.channels();
        int[][] intMtx = new int[numRows][numCols];

        // copy mat obj to 2d int array
        intMtx = new int[numRows][numCols];
        byte[] data = new byte[(int) mtx.total() * mtx.channels()];
        mtx.get(0, 0, data);
        int width = mtx.width();
        int height = mtx.height();
        int numpix = (int) mtx.total();
        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                for (int i = 0; i < channels; i++) {
                    intMtx[r][c] = data[r * (width * channels) + c * channels + i] & 0xff;
                }
            }
        }

        return intMtx;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OpenCVTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OpenCVTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OpenCVTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OpenCVTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OpenCVTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ClearROI;
    private javax.swing.JButton btn_Colour;
    private javax.swing.JButton btn_Detect;
    private javax.swing.JButton btn_Exit;
    private javax.swing.JButton btn_GetROI;
    private javax.swing.JButton btn_Open;
    private javax.swing.JButton btn_Select;
    private javax.swing.JLabel lbl_Image;
    private javax.swing.JLabel lbl_msg;
    // End of variables declaration//GEN-END:variables
}
